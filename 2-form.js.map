{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["const formData = {\n  email: '',\n  message: '',\n};\n\n// Ключ для локального сховища\nconst STORAGE_KEY = 'feedback-form-state';\n\n// Посилання на форму\nconst form = document.querySelector('.feedback-form');\n\n// 2. Відстежую зміну у формі через подію input та збереження у локальне сховище\nform.addEventListener('input', event => {\n  // Перевіряємо, яке поле змінилося і оновлюємо formData\n  if (event.target.name === 'email') {\n    formData.email = event.target.value.trim(); // .trim() для видалення пробілів по краях\n  } else if (event.target.name === 'message') {\n    formData.message = event.target.value.trim();\n  }\n\n  // Зберігаю оновлений об'єкт formData у локальне сховище\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));\n});\n\n// 3. При завантаженні сторінки перевірка та заповнення форми\nwindow.addEventListener('load', () => {\n  const savedData = localStorage.getItem(STORAGE_KEY);\n\n  if (savedData) {\n    try {\n      const parsedData = JSON.parse(savedData);\n\n      // Заповнюю formData та поля форми\n      formData.email = parsedData.email || ''; // Забезпечуємо, що не буде undefined\n      formData.message = parsedData.message || ''; // Забезпечуємо, що не буде undefined\n\n      form.elements.email.value = formData.email;\n      form.elements.message.value = formData.message;\n    } catch (error) {\n      console.error('Помилка при парсингу даних з локального сховища:', error);\n      // Якщо дані пошкоджені, можна очистити сховище, щоб уникнути подальших помилок\n      localStorage.removeItem(STORAGE_KEY);\n    }\n  }\n});\n\n// 4. Обробка відправлення форми\nform.addEventListener('submit', event => {\n  event.preventDefault(); // Запобігаємо стандартній поведінці відправлення форми (перезавантаження сторінки)\n\n  // Оновлюю formData перед перевіркою на випадок, якщо користувач не відпустив клавішу після останнього вводу\n  formData.email = form.elements.email.value.trim();\n  formData.message = form.elements.message.value.trim();\n\n  // Перевірка на заповненість полів\n  if (formData.email === '' || formData.message === '') {\n    alert('Fill please all fields'); // Показуємо сповіщення\n    return; // Перериваємо виконання функції, якщо поля не заповнені\n  }\n\n  // Якщо всі поля заповнені:\n  console.log(formData); // Виводимо об'єкт formData у консоль\n\n  // Очищаю локальне сховище\n  localStorage.removeItem(STORAGE_KEY);\n\n  // Очищаю об'єкт formData\n  formData.email = '';\n  formData.message = '';\n\n  // Очищаю поля форми\n  form.reset(); // Метод form.reset() очищає всі поля форми\n});\n"],"names":["formData","STORAGE_KEY","form","event","savedData","parsedData","error"],"mappings":"wFAAA,MAAMA,EAAW,CACf,MAAO,GACP,QAAS,EACX,EAGMC,EAAc,sBAGdC,EAAO,SAAS,cAAc,gBAAgB,EAGpDA,EAAK,iBAAiB,QAASC,GAAS,CAElCA,EAAM,OAAO,OAAS,QACxBH,EAAS,MAAQG,EAAM,OAAO,MAAM,KAAI,EAC/BA,EAAM,OAAO,OAAS,YAC/BH,EAAS,QAAUG,EAAM,OAAO,MAAM,KAAI,GAI5C,aAAa,QAAQF,EAAa,KAAK,UAAUD,CAAQ,CAAC,CAC5D,CAAC,EAGD,OAAO,iBAAiB,OAAQ,IAAM,CACpC,MAAMI,EAAY,aAAa,QAAQH,CAAW,EAElD,GAAIG,EACF,GAAI,CACF,MAAMC,EAAa,KAAK,MAAMD,CAAS,EAGvCJ,EAAS,MAAQK,EAAW,OAAS,GACrCL,EAAS,QAAUK,EAAW,SAAW,GAEzCH,EAAK,SAAS,MAAM,MAAQF,EAAS,MACrCE,EAAK,SAAS,QAAQ,MAAQF,EAAS,OACxC,OAAQM,EAAO,CACd,QAAQ,MAAM,mDAAoDA,CAAK,EAEvE,aAAa,WAAWL,CAAW,CACpC,CAEL,CAAC,EAGDC,EAAK,iBAAiB,SAAUC,GAAS,CAQvC,GAPAA,EAAM,eAAc,EAGpBH,EAAS,MAAQE,EAAK,SAAS,MAAM,MAAM,OAC3CF,EAAS,QAAUE,EAAK,SAAS,QAAQ,MAAM,OAG3CF,EAAS,QAAU,IAAMA,EAAS,UAAY,GAAI,CACpD,MAAM,wBAAwB,EAC9B,MACD,CAGD,QAAQ,IAAIA,CAAQ,EAGpB,aAAa,WAAWC,CAAW,EAGnCD,EAAS,MAAQ,GACjBA,EAAS,QAAU,GAGnBE,EAAK,MAAK,CACZ,CAAC"}